# -*- coding: utf-8 -*-
"""Rock vs Mine Prediction(ML PROJECT).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LbRVKoviirY28yxI8kZhHu-keM6mumlS

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

#loading the dataset to a pandas dataframe
sonar_data=pd.read_csv("/content/Copy of sonar data.csv", header=None)

sonar_data.head()

#number of rows and columns
sonar_data.shape

sonar_data.describe() #describe=statistical measures of the data

sonar_data[60].value_counts()

"""M-->Mine
R-->Rock
"""

sonar_data.groupby(60).mean()

#Seperating data and Labels
X=sonar_data.drop(columns=60,axis=1)
Y=sonar_data[60]
print(X)
print(Y)

"""Training and Test data"""

X_train, X_test, Y_train, Y_test=train_test_split(X,Y, test_size=0.1, stratify=Y, random_state=1)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training=Logistic Regression"""

model=LogisticRegression()

#training the logistic regression model with training data
model.fit(X_train, Y_train)

"""Model Evaluation"""

#accuracy of the training data
X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction, Y_train)

print("Accuracy on training data:",training_data_accuracy)

#accuracy of the test data
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction, Y_test)

print("Accuracy on testing data:",test_data_accuracy)

"""Making a Predictive System"""

input_data=(0.02,0.0371,0.0428,0.0207,0.0954,0.0986,0.1539,0.1601,0.3109,0.2111,0.1609,0.1582,0.2238,0.0645,0.066,0.2273,0.31,0.2999,0.5078,0.4797,0.5783,0.5071,0.4328,0.555,0.6711,0.6415,0.7104,0.808,0.6791,0.3857,0.1307,0.2604,0.5121,0.7547,0.8537,0.8507,0.6692,0.6097,0.4943,0.2744,0.051,0.2834,0.2825,0.4256,0.2641,0.1386,0.1051,0.1343,0.0383,0.0324,0.0232,0.0027,0.0065,0.0159,0.0072,0.0167,0.018,0.0084,0.009,0.0032)
input_data_as_numpy_array=np.asarray(input_data)
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
prediction=model.predict(input_data_reshaped)
print(prediction)
if(prediction[0]=='R'):
 print("the object is rock")
else:
  print("the object is mine")

input_data=(0.0629,0.1065,0.1526,0.1229,0.1437,0.119,0.0884,0.0907,0.2107,0.3597,0.5466,0.5205,0.5127,0.5395,0.6558,0.8705,0.9786,0.9335,0.7917,0.7383,0.6908,0.385,0.0671,0.0502,0.2717,0.2839,0.2234,0.1911,0.0408,0.2531,0.1979,0.1891,0.2433,0.1956,0.2667,0.134,0.1073,0.2023,0.1794,0.0227,0.1313,0.1775,0.1549,0.1626,0.0708,0.0129,0.0795,0.0762,0.0117,0.0061,0.0257,0.0089,0.0262,0.0108,0.0138,0.0187,0.023,0.0057,0.0113,0.0131)
input_data_as_numpy_array=np.asarray(input_data)
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
prediction=model.predict(input_data_reshaped)
print(prediction)
if(prediction[0]=='R'):
 print("the object is rock")
else:
  print("the object is mine")